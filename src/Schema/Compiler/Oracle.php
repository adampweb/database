<?php
/* ===========================================================================
 * Copyright 2018 Zindex Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================================ */

namespace Opis\Database\Schema\Compiler;

use Opis\Database\Schema\{
    Compiler, Column, Blueprint
};

class Oracle extends Compiler
{
    protected string $autoincrement = 'GENERATED BY DEFAULT ON NULL AS IDENTITY';
    protected array $modifiers = ['default', 'nullable', 'autoincrement'];

    public function currentDatabase(string $dsn): array
    {
        return [
            'sql' => 'SELECT user FROM dual',
            'params' => [],
        ];
    }

    public function getTables(string $database): array
    {
        $sql = 'SELECT ' . $this->wrap('table_name') . ' FROM ' . $this->wrap('all_tables')
            . ' WHERE owner = ? '
            . ' ORDER BY ' . $this->wrap('table_name') . ' ASC';

        return [
            'sql' => $sql,
            'params' => [$database],
        ];
    }

    public function getColumns(string $database, string $table): array
    {
        $sql = 'SELECT ' . $this->wrap('column_name') . ' AS ' . $this->wrap('name')
            . ', ' . $this->wrap('data_type') . ' AS ' . $this->wrap('type')
            . ' FROM ' . $this->wrap('all_tab_columns')
            . ' WHERE LOWER(' . $this->wrap('owner') . ') = ? AND LOWER(' . $this->wrap('table_name') . ') = ? '
            . ' ORDER BY ' . $this->wrap('column_id') . ' ASC';

        return [
            'sql' => $sql,
            'params' => [$database, $table],
        ];
    }

    protected function handleTypeInteger(Column $column): string
    {
        switch ($column->get('size', 'normal')) {
            case 'tiny':
                return 'NUMBER(3)';
            case 'small':
                return 'NUMBER(5)';
            case 'medium':
                return 'NUMBER(7)';
            case 'big':
                return 'NUMBER(19)';
        }

        return 'NUMBER(10)';
    }

    protected function handleTypeDouble(Column $column): string
    {
        return 'FLOAT(24)';
    }

    protected function handleTypeDecimal(Column $column): string
    {
        if (null !== $l = $column->get('length')) {
            if (null === $p = $column->get('precision')) {
                return 'NUMBER(' . $this->value($l) . ')';
            }
            return 'NUMBER(' . $this->value($l) . ', ' . $this->value($p) . ')';
        }

        return 'NUMBER(10)';
    }

    protected function handleTypeBoolean(Column $column): string
    {
        return 'NUMBER(1)';
    }

    protected function handleTypeText(Column $column): string
    {
        switch ($column->get('size', 'normal')) {
            case 'tiny':
            case 'small':
                return 'VARCHAR2(2000)';
            case 'medium':
            case 'big':
                return 'CLOB';
        }

        return 'CLOB';
    }

    protected function handleTypeString(Column $column): string
    {
        return 'VARCHAR2(' . $this->value($column->get('length', 255)) . ')';
    }

    protected function handleTypeTime(Column $column): string
    {
        return 'DATE';
    }

    protected function handleTypeDateTime(Column $column): string
    {
        return 'DATE';
    }

    protected function handleTypeBinary(Column $column): string
    {
        switch ($column->get('size', 'normal')) {
            case 'tiny':
            case 'small':
                return 'RAW(2000)';
            case 'medium':
            case 'large':
                return 'BLOB';
        }

        return 'BLOB';
    }

    protected function handleModifyColumn(Blueprint $table, $data): string
    {
        return 'ALTER TABLE ' . $this->wrap($table->getTableName()) . ' MODIFY ' . $this->handleColumns([$data]);
    }

    protected function handleAddColumn(Blueprint $table, $data): string
    {
        return 'ALTER TABLE ' . $this->wrap($table->getTableName()) . ' ADD ' . $this->handleColumns([$data]);
    }

    protected function handleSetDefaultValue(Blueprint $table, $data): string
    {
        return 'ALTER TABLE ' . $this->wrap($table->getTableName()) . ' MODIFY '
            . $this->wrap($data) . ' DEFAULT ' . $this->value($data['value']);
    }

    protected function handleDropDefaultValue(Blueprint $table, $data): string
    {
        return 'ALTER TABLE ' . $this->wrap($table->getTableName()) . ' MODIFY '
            . $this->wrap($data) . ' DEFAULT NULL';
    }
}
